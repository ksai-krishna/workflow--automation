import React, { useState } from 'react';
import { Handle, Position, NodeProps } from '@xyflow/react';

interface WebhookTriggerNodeData {
  label: string;
  webhookId?: string; // Generated by backend when workflow is saved
  apiUrl?: string;    // The base URL of your API
}

const WebhookTriggerNode: React.FC<NodeProps<WebhookTriggerNodeData>> = ({ data, selected }) => {
  const [copied, setCopied] = useState(false);

  console.log('WebhookTriggerNode data:', data); // Debug log

  // Only show URL if BOTH webhookId AND apiUrl exist
  const hasValidWebhook = data.webhookId && data.apiUrl;
  const webhookUrl = hasValidWebhook 
    ? `${data.apiUrl}/webhook/${data.webhookId}` 
    : 'Save the workflow to get a Webhook URL';

  const copyToClipboard = async () => {
    if (!hasValidWebhook) return;
    try {
      await navigator.clipboard.writeText(webhookUrl);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Clipboard copy failed', err);
    }
  };

  return (
    <div
      style={{
        border: selected ? '2px solid #20b2aa' : '1px solid #20b2aa',
        borderRadius: 8,
        background: '#f0ffff',
        width: 350,
        boxShadow: selected ? '0 2px 10px rgba(32,178,170,0.3)' : '0 1px 3px rgba(0,0,0,0.1)',
        fontFamily: 'sans-serif',
      }}
    >
      {/* Header */}
      <div
        style={{
          background: '#20b2aa',
          color: 'white',
          padding: '8px 12px',
          borderRadius: '6px 6px 0 0',
          fontWeight: 'bold',
        }}
      >
        {data.label || 'Webhook Trigger'}
      </div>

      {/* Content */}
      <div style={{ padding: '12px', fontSize: '13px', color: '#333' }}>
        {hasValidWebhook ? (
          <>
            <label style={{ display: 'block', fontWeight: 500, marginBottom: '4px' }}>
              Webhook URL:
            </label>
            <p style={{ fontSize: '12px', color: '#555', marginBottom: '8px' }}>
              Send POST requests to this URL to trigger the workflow.
            </p>
            <input
              type="text"
              readOnly
              value={webhookUrl}
              style={{
                width: '100%',
                padding: '6px',
                borderRadius: '4px',
                border: '1px solid #ccc',
                background: '#eee',
                marginBottom: '8px',
                fontSize: '12px',
              }}
            />
            <button
              onClick={copyToClipboard}
              style={{
                width: '100%',
                padding: '8px',
                border: 'none',
                borderRadius: '4px',
                background: '#007bff',
                color: 'white',
                cursor: 'pointer',
                fontSize: '13px',
              }}
            >
              {copied ? 'Copied!' : 'Copy URL'}
            </button>
          </>
        ) : (
          <p style={{ color: '#d9534f', fontSize: '13px', margin: 0 }}>
            Save the workflow first to generate a webhook URL.
          </p>
        )}
      </div>

      <Handle type="source" position={Position.Right} style={{ background: '#20b2aa' }} />
    </div>
  );
};

export default WebhookTriggerNode;